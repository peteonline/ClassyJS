Own other things
Overwrite members within instances (via reflection)
Do specific member behaviour (call method, get/set property...)
Check class implements interface
Get parent class(es)
Get children
Do specific member behaviour on object basis
Check type where relevant
Decide which member to use - for example if multiple public/protected/privates exist
Static stuff - some members are recorded against class not object

Property
	Record value against class instance
	Property stored against class
	No such thing as static properties
	Type check in (can be undefined/null on instantiation)
	Can have multiple get/set functions for public/private/protected
	If no get/set function, simply don't use

Method
	Stored against class
	Function which should be called against object
	Static versions not run against object
	Type check in and out
	Can be many with different signatures (priv/pub/prot / in args / out args)
	Can have default values for inputs

Event
	Callbacks stored against class instance
	Actual event object stored against class
	Triggered against class instance
	Cannot be static
	Type check trigger values
	Type check method arguments when binding
	Can be many with different signatures (priv/pub/prot / args)

Constant
	Stored against class - class and object constant is same thing
	Can only be set at construction
	Value is optional - set something random if no value
	Type checked at construction

